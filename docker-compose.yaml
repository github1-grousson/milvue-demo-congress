x-postgres-config: &postgres-config
  POSTGRES_HOST: core-db
  POSTGRES_DB: gorm
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_PORT: 5432
  
services:
  pacs:
    container_name: milvue-pacs
    image: jodogne/orthanc-plugins:1.12.6
    restart: always
    volumes:
      - ./conf/orthanc.json:/etc/orthanc/orthanc.json:ro
      - orthanc_db:/var/lib/orthanc/db/
    networks:
      - milvue

  milvue-viewer:
    container_name: milvue-viewer
    image: wilfriedmv/milvue-ohif-viewer:2.8
    restart: always
    ports:
      - 80:80
    volumes:
      - ./conf/milvue-ohif-nginx.conf:/etc/nginx/conf.d/default.conf:ro
      - ./conf/milvue-tcr-config.json:/usr/share/nginx/html/milvue-tcr-config.json:ro
      - ./templates:/usr/share/nginx/html/templates:ro
    networks:
      - milvue

  milvue-report-manager:
    container_name: milvue-report-manager
    image: wilfriedmv/milvue-report-manager:latest
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/healthcheck"]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - 8000:8000
    networks:
      - milvue

  core-db:
    image: postgres:14-alpine
    environment:
      *postgres-config
    volumes:
      - type: volume
        source: pgdata
        target: /var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always
    networks:
      - milvue

  storescp:
    image: milvue/pacsor-storescp-wgs:latest
    restart: always
    environment:
      CONFIG_PROFILE: ${CONFIG_PROFILE:-WithSC}
      LOG_LEVEL: ${PACSOR_LOG_LEVEL:-warn}
    volumes:
      - inputs:/inputs
      - type: bind
        source: "./conf/filter.cfg"
        target: /filter.cfg
    healthcheck:
      test: [ "CMD-SHELL", "echoscu -v storescp 1040" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue

  storescp-precert:
    image: milvue/pacsor-storescp-wgs:latest
    restart: always
    environment:
      CORE_HOST: core-precert
      CONFIG_PROFILE: ${CONFIG_PROFILE:-WithSC}
      LOG_LEVEL: ${PACSOR_LOG_LEVEL:-warn}
    volumes:
      - inputs:/inputs
      - type: bind
        source: "./conf/filter.cfg"
        target: /filter.cfg
    healthcheck:
      test: [ "CMD-SHELL", "echoscu -v storescp 1040" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue
    profiles:
      - withpacsorprecert

  core:
    image: milvue/pacsor-core:latest
    environment:
      GOMAXPROCS: 0
      PROFILER: true
      SIGNED_URL: ${SIGNED_URL:-true}
      API_URL: ${API_URL:?need valid URL}
      TOKEN: ${TOKEN:?can't be empty}
      CALLBACK_URLS: ${CALLBACK_URLS:-http://storescu:8000}
      NO_DUPLICATE_UPLOAD: ${NO_DUPLICATE_UPLOAD:-true}
      <<: *postgres-config
    depends_on:
      core-db:
        condition: service_healthy
    restart: always
    volumes:
        - inputs:/inputs
        - outputs:/outputs
    healthcheck:
      test: [ "CMD", "./healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue

  core-precert:
    image: milvue/pacsor-core:latest
    environment:
      GOMAXPROCS: 0
      PROFILER: true
      SIGNED_URL: ${SIGNED_URL:-true}
      API_URL: ${API_URL_PRECERT:?need valid URL}
      TOKEN: ${TOKEN_PRECERT:?can't be empty}
      CALLBACK_URLS: ${CALLBACK_URLS:-http://storescu:8000}
      NO_DUPLICATE_UPLOAD: ${NO_DUPLICATE_UPLOAD:-true}
      <<: *postgres-config
    depends_on:
      core-db:
        condition: service_healthy
      core:
        condition: service_healthy
    restart: always
    volumes:
        - inputs:/inputs
        - outputs:/outputs
    healthcheck:
      test: [ "CMD", "./healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue
    profiles:
      - withpacsorprecert

  storescu:
    image: milvue/pacsor-storescu:latest
    restart: always
    environment:
      PACS_IP: pacs
      PACS_PORT: 4242
      PACS_AET: ORTHANC
      MILVUE_AET: ${MILVUE_AET:-MILVUE}
    volumes:
      - outputs:/outputs
    healthcheck:
      test: [ "CMD-SHELL", "curl -X GET storescu:8000/healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue
    profiles:
      - withpacsor

  hl7:
    image: "milvue/pacsor-hl7:latest"
    restart: always
    environment:
      ENABLE_HL7: true
      SEN_APP: ${SENDING_APPLICATION:-MILVUE_GATEWAY}
      SEN_FAC: ${SENDING_FACILITY:-MILVUE}
      REC_APP: ${RECEIVING_APPLICATION:?need valid RECEIVING_APPLICATION}
      REC_FAC: ${RECEIVING_FACILITY:?need valid RECEIVING_FACILITY}
      HL7_LANG: ${HL7_LANGUAGE:-FR}
      RIS_HOST: ${RIS_HOST_IP:?need valid RIS_HOST IP address}
      RIS_PORT: ${RIS_HOST_PORT:?need valid RIS_PORT}
      RIS_TIMEOUT: ${RIS_TIMEOUT:-15}
      INCLUDE_REPORT: ${INCLUDE_TECHCARE_REPORT:-false}
      API_URL: ${API_URL:?need valid URL}
      REPORT_URL: ${TECHCARE_REPORT_URL:?need valid report URL}
      TOKEN: ${TOKEN:?can't be empty}
      REPORT_FORMAT: ${TECHCARE_REPORT_FORMAT:-B64}
      DEF_PID_ISSUER: ${DEF_PID_ISSUER:-MILVUE}
      LOG_LEVEL: ${HL7_LOG_LEVEL:-WARN}
      GCP_LOGS: ${GCP_LOGS:-true}
      POPULATE_PID: ${POPULATE_PID:-true}
      POPULATE_PV1: ${POPULATE_PV1:-false}
      POPULATE_ORC: ${POPULATE_ORC:-true}
      POPULATE_ZDS: ${POPULATE_ZDS:-true}
      SIUID_IN_OBX1: ${SIUID_IN_OBX1:-true}
      OBX_UPPERCASE: ${OBX_UPPERCASE:-true}
      HTTP_TIMEOUT: ${HTTP_TIMEOUT:-600}
    volumes:
      - outputs:/outputs
    healthcheck:
      test: [ "CMD-SHELL", "curl -X GET hl7:8000/healthcheck" ]
      interval: 5s
      timeout: 5s
      retries: 10
    networks:
      - milvue
    profiles:
      - withhl7
  
volumes: 
  orthanc_db:
    name: milvue-congress-orthancdb
    external: true
  inputs:
  outputs:
  pgdata:

networks:
  milvue:
    name: milvue-congress-net
    external: true
  